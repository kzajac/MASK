MultiScaleModel.generate do

application_module :ant_end_elephant do

       implementation_type :muscle_application
       
       
    application_module :elephant do
        
        register_xmml_data
        
        implementation_type :muscle_kernel
        
        

	language :java

	timescale :delta=>1, :max=>10
        spacescale :id=>:x, :delta=>"1 m", :max=>"10 m"
        
	execution do

        	declare_param :start=>0, :stop=>10, :step=>1
        	
                declare_port :myDistance, :double_array, 1
                declare_port :otherDistance, :double_array
                
		execute "myDistance[0]=0.0;"

                
		loop :start_time=>:start, :stop_time=>:stop, :step_time=>:step do

  		
  			execute "
                        
    			myDistance[0]+=1.0;
  		        System.out.println(\"Elephant is walking to \" +myDistance[0] + \" meters\");
  	            	
  			"
			send :myDistance
  			receive :otherDistance

		end
  	        execute "
                 System.out.println(\"The end\");
                "
	end

    end

    application_module :ant2elephant do
	implementation_type :muscle_kernel
#        junction_type :fan_in
        
        register_xmml_data

	language :java



	execution do
                declare_port :inDistance, :double_array
                declare_port :outDistance, :double_array, 1
	declare_param :start=>0, :stop=>10, :step=>1
        
                
		loop :start_time=>:start, :stop_time=>:stop, :step_time=>:step do

  			receive :inDistance
  	        
  			execute "
                        System.out.println(\"ant2elephant is transforming scale...\");
                        "
  		        execute "
  	                       outDistance[0]=0.01*inDistance[0];
  	                "
			send :outDistance

		end
  	        execute "
                 System.out.println(\"The end\");
                "
	
        end    
    end
    application_module :elephant2ant do
	implementation_type :muscle_kernel
#        junction_type :fan_in
        
        register_xmml_data

	language :java



	execution do
                declare_port :inDistance, :double_array
                declare_port :outDistance, :double_array, 1
	declare_param :start=>0, :stop=>10, :step=>1
        
                
		loop :start_time=>:start, :stop_time=>:stop, :step_time=>:step do

  			receive :inDistance
  	        
  			execute "
                        System.out.println(\"elephant2ant is transforming scale...\");
                        "
  		        execute "
  	                       outDistance[0]=100*inDistance[0];
  	                "
			send :outDistance

		end
  	        execute "
                 System.out.println(\"The end\");
                "
	
        end    
    end
    
    application_module :ant do

	implementation_type :muscle_kernel

        register_xmml_data

	language :java

	timescale :delta=>1, :max=>10
        spacescale :id=>:x, :delta=>"1 cm", :max=>"100 m"


	execution do
        
        declare_param :start=>0, :stop=>10, :step=>1

	declare_port :myDistance, :double_array, 1
	declare_port :otherDistance, :double_array

        

	loop :start_time=>0, :stop_time=>10, :step_time=>1 do

			receive :otherDistance
  	
  		execute "
                        System.out.println(\"Ant have received Elephant distance:\"+ otherDistance[0] + \" cm\");
  			int i;
  		        for (i=(int)myDistance[0]; i<(int)otherDistance[0]; i++){
  		          System.out.println (\"Ant is trying to catch Elephant in step \"+ i +\" cm\");	
  		          myDistance[0]+=1.0;
    		        }
    		        "
    		        send :myDistance
  		
  		
	end
        execute "
                 System.out.println(\"The end\");
        "

	end

    end



    execution  do

	instance  :big, :elephant, :domainA
	instance  :small, :ant, :domainA
	instance  :a2e, :ant2elephant
	instance  :e2a, :elephant2ant

	join :big, :e2a  do 
	    tie :myDistance, :inDistance
	end
	join :e2a, :small  do 
	    tie :outDistance, :otherDistance
	end
	join :small, :a2e  do 
	    tie :myDistance, :inDistance
	end
	join :a2e, :big  do 
	    tie :outDistance, :otherDistance
	end

    end

end # my_multi_model


end #generate


