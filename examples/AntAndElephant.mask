MultiScaleModel.generate do

application_module :ant_end_elephant do

       implementation_type :muscle_application
       
       
    application_module :elephant do
        
        register_xmml_data
        
        implementation_type :muscle_kernel
        
        

	language :java

        spacescale :id=>:x, :delta=>"1 m", :max=>"10 m"
        
	execution do


        	
                declare_port :myDistance, :double_array, 1
                declare_port :ok, :double_array
                declare_param :initial_distance=>0

		execute "myDistance[0]=(double) initial_distance;
			System.out.println (\"Elephant inital distance is \"+ initial_distance);
    	
		"

                
		loop :start_time=>:initial_distance, :stop_time=>:value_space_x_max, :step_time=>:value_space_x_delta do

  		
  			execute "
                        
    			myDistance[0]+=1.0;
  		        System.out.println(\"Elephant is walking to \" +myDistance[0] + \" meters\");
  	            	
  			"
			send :myDistance
  			receive :ok

		end
  	        execute "
                 System.out.println(\"The end\");
                "
	end

    end

    application_module :elephant2ant do
	implementation_type :muscle_kernel
        junction_type :fan_out
        
        register_xmml_data

	language :java
	



	execution do
                declare_port :inDistance, :double_array
                declare_port :outDistance, :double_array, 1
		declare_param :stop=>10, :step=>1
        
                
		loop :start_time=>0, :stop_time=>:stop, :step_time=>:step do

  			receive :inDistance
  	        
  			execute "
                        System.out.println(\"elephant2ant is transforming scale...\");
                        "
  		        execute "
  	                       outDistance[0]=100*inDistance[0];
  	                "
			send :outDistance

		end
  	        execute "
                 System.out.println(\"The end\");
                "
	
        end    
    end
    
    application_module :ant do

	implementation_type :muscle_kernel

        register_xmml_data

	language :java, :extra_imports=>"java.io.*"

        spacescale :id=>:x, :delta=>"1 cm", :max=>"1000 m"


	execution do
        

	declare_port :ok, :double_array, 1
	declare_port :otherDistance, :double_array
        declare_param :initial_distance=>0, :in_file=>"my_food.txt", :out_file=>"step_log.txt"

        execute "
                try{
                FileReader fr = new FileReader(in_file);
                    int ch;
                        do {
                              ch = fr.read();
                              if (ch != -1)
                              System.out.print((char) ch);
                           } while (ch != -1);
                        fr.close();
                    }
                    catch(Exception e ){
                    System.err.println(\"Error: \" + e.getMessage());
                    
                    }
                BufferedWriter out = null;
                      
                try{
            	    FileWriter fstream = new FileWriter(out_file);
            	    out = new BufferedWriter(fstream);
            	    out.write (\"hello\");
                }catch (Exception e){
            	    System.err.println(\"Error: \" + e.getMessage());
                }        
    	        double myDistance=(double)initial_distance;
    	        System.out.println (\"Ant inital distance is \"+ initial_distance);
    		"        

	loop :start_time=>:initial_distance, :stop_time=>:value_space_x_max, :step_time=>:value_space_x_delta do

			receive :otherDistance
  	
  		execute "
                        System.out.println(\"Ant have received Elephant distance:\"+ otherDistance[0] + \" cm\");
  			int i;
  		        for (i=(int)myDistance; i<(int)otherDistance[0]; i++){
  		           myDistance+=1.0;
    		        }
    		        System.out.println (\"Ant is trying to catch Elephant - now the distance is \" + (int) myDistance+\" cm\");	
  		        try{
  		           
    		              out.write (\"Ant is trying to catch Elephant - now the distance is \" + (int) myDistance+\" cm\");	
  		           }
  		           catch(Exception e){
            			System.err.println(\"Error: \" + e.getMessage());
            		   }  
  		         
    		        ok[0]=1.0;
    		        "
    		        send :ok
  		
  		
	end
        execute "
                 try{
            		out.close();
                 
                 }
                 catch(Exception e){
            			System.err.println(\"Error: \" + e.getMessage());
            	 }  
  		
                 System.out.println(\"The end\");
        "

	end

    end



    execution  do

	instance  :big, :elephant, :domainA
	instance  :small, :ant, :domainA
	instance  :e2a, :elephant2ant

	join :big, :e2a  do 
	    tie :myDistance, :inDistance
	end
	join :e2a, :small  do 
	    tie :outDistance, :otherDistance
	end
	join :small, :big  do 
	    tie :ok, :ok
	end

    end

end # my_multi_model


end #generate


