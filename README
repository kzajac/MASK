This is a prototype of multiscale application skeleton framework.
This is experimental, could produce errors and warnings

The framework generates Muscle (http://muscle.berlios.de) project from specyfication in MASK DSL 
(see examples/model1.mask) 

FOR installation as GridSpace Interpreter: 

1. set $jar_destination_dir for a directory where you want to the jars to 
be build in a compilation step. This dir will be put into build.xml for 
generated java sources.

2. set $jar_final_location to the location of jars (bundle) to be register 
in MaMe. 
This should have a form hostname.domain:/absolute/path/to/jars/directory/

3. set $install_dir to MASK installation (will be used to find 
build.xml_template)

4. Comment and Uncommend  lines at the end of the file (for reading 
from std input instead of the file)

Plan TODO

-CxA params
-scale params
-szablony aplikacji ISR, Fuzja
- generator info do xmla
 
Quick start:

1. generate muscle java sources from your specyfication in mask language
- for example for  model1.mask

ruby src/mask.rb examples/model1.mask

2. generate jar (you have to have muscle installed and set up env $MUSCLE_HOME)

cd generatedExamples/maskExample1/
ant

3. run using MUSCLE

muscle.rb --main plumber modA modB --cxa_file cxa/maskExample1.cxa.rb 

if there is a memory problem it is good to set heap range for muscle with additional option:
--heap "128m..216m"

4.You can run it in GridSpace on ui (https://gs2.mapper-project.eu/2.4.0-SNAPSHOT/) with Muscle interpreter 
using cxa contents in snippet (change classpath in CxA to the absolute path).

For running it in the GS on ui you may have to manually install ruby gem json
  
